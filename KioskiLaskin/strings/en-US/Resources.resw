<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationNameHeader.Text" xml:space="preserve">
    <value>Kiosk Calculator</value>
  </data>
  <data name="articleName.Text" xml:space="preserve">
    <value>Name of the article</value>
  </data>
  <data name="articleNameEditHeader" xml:space="preserve">
    <value>Name of the article</value>
  </data>
  <data name="articlePriceEditHeader" xml:space="preserve">
    <value>Price of the article</value>
  </data>
  <data name="articlesHeader.Text" xml:space="preserve">
    <value>Articles</value>
  </data>
  <data name="CancelButton.Content" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CatalogueHasArticleXMsg" xml:space="preserve">
    <value>Catalog contains the article %s already.</value>
  </data>
  <data name="catalogueName.Text" xml:space="preserve">
    <value>Name of the catalogue</value>
  </data>
  <data name="cataloguesHeader.Text" xml:space="preserve">
    <value>Catalogues</value>
  </data>
  <data name="ConfirmationMsgHeader" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="ContinueDayButton.Text" xml:space="preserve">
    <value>Continue existing event</value>
  </data>
  <data name="DefaultArticleName" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteXQuestionMsg" xml:space="preserve">
    <value>Do you like to delete %s ?</value>
  </data>
  <data name="EventNameQueryHeader.Text" xml:space="preserve">
    <value>Name for the Event</value>
  </data>
  <data name="EventNameQueryInfo.Text" xml:space="preserve">
    <value>Give your event a name that describes the event as detailed as possible</value>
  </data>
  <data name="EventsHeader.Text" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="EventX" xml:space="preserve">
    <value>Event:
%s</value>
  </data>
  <data name="EventXStoppedInListMsg" xml:space="preserve">
    <value>Event %s is Interrupted. Select the same event and continue or select some other event.</value>
  </data>
  <data name="EventXStoppedMsg" xml:space="preserve">
    <value>Event %s is Interrupted. You can continue event from main page option.</value>
  </data>
  <data name="languageSettingsTitle.Text" xml:space="preserve">
    <value>Kieli / Language</value>
  </data>
  <data name="LaskinHeader.Text" xml:space="preserve">
    <value>Calculator</value>
  </data>
  <data name="MoneyBack.Text" xml:space="preserve">
    <value>Change:</value>
  </data>
  <data name="MoneyGot.Text" xml:space="preserve">
    <value>Got:</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoCataloguesMsg" xml:space="preserve">
    <value>No catalogues, please create the first catalogue.</value>
  </data>
  <data name="pcs" xml:space="preserve">
    <value>pcs</value>
  </data>
  <data name="PriceCanBeOnlyPositiveNumberMsg" xml:space="preserve">
    <value>Price can be only positive number.</value>
  </data>
  <data name="ReadyButton.Content" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="SelectButton.Content" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="SettingsHeader.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="settingsRemoveAllButton.Text" xml:space="preserve">
    <value>Delete all data</value>
  </data>
  <data name="settingsRemoveAllEventsButton.Text" xml:space="preserve">
    <value>Delete all events</value>
  </data>
  <data name="settingsRemoveEventsButton.Text" xml:space="preserve">
    <value>Delete events</value>
  </data>
  <data name="ShowStatisticsButton.Text" xml:space="preserve">
    <value>Statistics of the event</value>
  </data>
  <data name="StartNewDayButton.Text" xml:space="preserve">
    <value>Start new event</value>
  </data>
  <data name="StatisticsHeader.Text" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="TotalSum.Text" xml:space="preserve">
    <value>Total sum:</value>
  </data>
  <data name="XHasDeletedMsg" xml:space="preserve">
    <value>%s is now deleted.</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CurrencySettingsTitle.Text" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="AllEventsRemovedMsg" xml:space="preserve">
    <value>All events are deleted.</value>
  </data>
  <data name="AllRemovedMsg" xml:space="preserve">
    <value>All user data are deleted.</value>
  </data>
  <data name="RemoveAllEventsMsg" xml:space="preserve">
    <value>Do you really like to delete all the events ? Catalogs are not removed.</value>
  </data>
  <data name="RemoveAllMsg" xml:space="preserve">
    <value>Do you really like to delete all user data ?</value>
  </data>
  <data name="About1" xml:space="preserve">
    <value>Application is made as a study project for universal windows applications.</value>
  </data>
  <data name="About2" xml:space="preserve">
    <value>If you have change proposals or improvement ideas, don't hesitate to contact.</value>
  </data>
  <data name="AboutSettingsTitle.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="RightsReserved" xml:space="preserve">
    <value>All rights reserved.</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
</root>